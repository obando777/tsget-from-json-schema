/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Application = IndividualApplication | BusinessApplication | TrustApplication;
export type Trustee =
  | {
      ssn: string;
    }
  | {
      passport: string;
      nationality: string;
    }
  | {
      matriculaConsular: string;
    };
export type Grantor =
  | {
      ssn: string;
    }
  | {
      passport: string;
      nationality: string;
    }
  | {
      matriculaConsular: string;
    };

export interface ApplicationsDocument {
  data: Application[];
  included?: unknown[];
  meta?: {};
}
export interface IndividualApplication {
  id: string;
  type: "individualApplication";
  attributes: {
    createdAt: string;
    updatedAt?: string;
    status: "AwaitingDocuments" | "PendingReview" | "Approved" | "Denied" | "Pending" | "Canceled";
    message?: string;
    evaluationOutcome?: string;
    evaluationId?: string;
    evaluationEntityId?: string;
    fullName: FullName;
    email?: string & string & string;
    phone?: Phone | Phone1;
    ssn?: string;
    passport?: string;
    nationality?: string;
    matriculaConsular?: string;
    address?: Address | Address1 | Address2;
    dateOfBirth?: string;
    dba?: string;
    ein?: string;
    ip?: string;
    soleProprietorship?: boolean;
    decisionMethod?: "Manually" | "Automatically";
    decisionUserId?: string;
    decisionReason?: string;
    decisionDateTime?: string;
    tags?: Tags;
    riskRate?: "low" | "medium" | "high";
    evaluationFlags?: string[];
    evaluationScores?: {};
    ipLocationDetails?: {};
    phoneLocationDetails?: {};
    maskedSSN?: string;
    maskedPassport?: string;
    maskedMatriculaConsular?: string;
    jwtSubject?: string | null;
    archived?: boolean;
    powerOfAttorneyAgent?: PowerOfAttorneyAgent;
    industry?:
      | "Retail"
      | "Wholesale"
      | "Restaurants"
      | "Hospitals"
      | "Construction"
      | "Insurance"
      | "Unions"
      | "RealEstate"
      | "FreelanceProfessional"
      | "OtherProfessionalServices"
      | "OnlineRetailer"
      | "OtherEducationServices";
  };
  relationships?: Relationships;
}
export interface FullName {
  first: string;
  last: string;
}
export interface Phone {
  countryCode: string;
  number: string;
}
export interface Phone1 {
  countryCode: string;
  number: string;
}
export interface Address {
  street: string;
  street2?: string | null;
  city: string;
  state: string;
  postalCode: string;
  country: "US";
}
export interface Address1 {
  street: string;
  street2?: string | null;
  city: string;
  state: string;
  postalCode: string;
  country: "CA";
}
export interface Address2 {
  street: string;
  street2?: string | null;
  city: string;
  state?: null | string;
  postalCode: string;
  country: string;
}
export interface Tags {
  /**
   * This interface was referenced by `Tags`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9_]{1,128}$".
   */
  [k: string]: string;
}
export interface PowerOfAttorneyAgent {
  status: string;
  fullName: FullName;
  email?: string & string & string;
  phone?: Phone | Phone1;
  ssn?: string;
  passport?: string;
  nationality?: string;
  matriculaConsular?: string;
  address?: Address | Address1 | Address2;
  dateOfBirth?: string;
  evaluationId?: string;
  evaluationFlags?: string[];
  maskedSSN?: string;
  maskedPassport?: string;
  maskedMatriculaConsular?: string;
}
export interface Relationships {
  org?: OrgRelationship;
  customer?: {
    data?: {
      type?: "individualCustomer" | "businessCustomer" | "trustCustomer";
      id?: string;
    };
  };
  documents?: {
    data: {
      type?: "document";
      id?: string;
    }[];
  };
  applicationForm?: {
    data?: {
      type?: "applicationForm";
      id?: string;
    };
    additionalProperties?: false;
  };
  trustees?: {
    data?: {
      type?: "trustee";
      id?: string;
    }[];
  };
  beneficiaries?: {
    data?: {
      type?: "beneficiary";
      id?: string;
    }[];
  };
}
export interface OrgRelationship {
  data: {
    id: string;
    type: "org";
  };
}
export interface BusinessApplication {
  id: string;
  type: "businessApplication";
  attributes: {
    createdAt: string;
    updatedAt?: string;
    status: "AwaitingDocuments" | "PendingReview" | "Approved" | "Denied" | "Pending" | "Canceled";
    message?: string;
    evaluationOutcome?: string;
    evaluationId?: string;
    evaluationEntityId?: string;
    name: string;
    dba?: string | null;
    ein?: string;
    entityType: "Corporation" | "LLC" | "Partnership";
    dateOfIncorporation?: string;
    stateOfIncorporation: string;
    purpose?: string;
    phone?: Phone | Phone1;
    address?: Address | Address1 | Address2;
    contact: Contact;
    officer: Officer;
    ip?: string;
    website?: string;
    beneficialOwners: BeneficialOwner[];
    decisionMethod?: "Manually" | "Automatically";
    decisionUserId?: string;
    decisionReason?: string;
    decisionDateTime?: string;
    tags?: Tags;
    riskRate?: "low" | "medium" | "high";
    evaluationFlags?: string[];
    ipLocationDetails?: {};
    phoneLocationDetails?: {};
    archived?: boolean;
    industry?:
      | "Retail"
      | "Wholesale"
      | "Restaurants"
      | "Hospitals"
      | "Construction"
      | "Insurance"
      | "Unions"
      | "RealEstate"
      | "FreelanceProfessional"
      | "OtherProfessionalServices"
      | "OnlineRetailer"
      | "OtherEducationServices";
  };
  relationships?: Relationships;
}
export interface Contact {
  fullName?: FullName;
  email?: string & string & string;
  phone?: Phone | Phone1;
  jwtSubject?: string | null;
}
export interface Officer {
  status: string;
  fullName: FullName;
  email?: string & string & string;
  phone?: Phone | Phone1;
  ssn?: string;
  passport?: string;
  nationality?: string;
  matriculaConsular?: string;
  address?: Address | Address1 | Address2;
  dateOfBirth?: string;
  evaluationId?: string;
  title?:
    | "President"
    | "CEO"
    | "COO"
    | "CFO"
    | "BenefitsAdministrationOfficer"
    | "CIO"
    | "VP"
    | "AVP"
    | "Treasurer"
    | "Secretary"
    | "Controller"
    | "Manager"
    | "Partner"
    | "Member";
  evaluationFlags?: string[];
  maskedSSN?: string;
  maskedPassport?: string;
  maskedMatriculaConsular?: string;
}
export interface BeneficialOwner {
  status: string;
  fullName: FullName;
  email?: string & string & string;
  phone?: Phone | Phone1;
  ssn?: string;
  passport?: string;
  nationality?: string;
  matriculaConsular?: string;
  address?: Address | Address1 | Address2;
  dateOfBirth?: string;
  evaluationId?: string;
  percentage?: number;
  evaluationFlags?: string[];
  maskedSSN?: string;
  maskedPassport?: string;
  maskedMatriculaConsular?: string;
}
export interface TrustApplication {
  id: string;
  type: "trustApplication";
  attributes: {
    createdAt: string;
    updatedAt?: string;
    status: "AwaitingDocuments" | "PendingReview" | "Approved" | "Denied" | "Pending" | "Canceled";
    message?: string;
    evaluationOutcome?: string;
    evaluationId?: string;
    evaluationEntityId?: string;
    name: string;
    dateOfIncorporation?: string;
    stateOfIncorporation: string;
    revocability?: "Revocable" | "Irrevocable";
    sourceOfFunds?: "Inheritance" | "Salary" | "Savings" | "InvestmentReturns" | "Gifts";
    taxId?: string;
    contact: Contact1;
    trustees?: Trustee[];
    grantor?: Grantor;
    ip?: string;
    decisionMethod?: "Manually" | "Automatically";
    decisionUserId?: string;
    decisionReason?: string;
    decisionDateTime?: string;
    tags?: Tags;
    riskRate?: "low" | "medium" | "high";
    evaluationFlags?: string[];
    ipLocationDetails?: {};
    phoneLocationDetails?: {};
    archived?: boolean;
  };
  relationships?: Relationships;
}
export interface Contact1 {
  fullName?: FullName;
  email?: string & string & string;
  phone?: Phone | Phone1;
  address?: Address | Address1 | Address2;
  jwtSubject?: string | null;
}
