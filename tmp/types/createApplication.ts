/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Officer =
  | {
      ssn: string;
    }
  | {
      passport: string;
      nationality: string;
    }
  | {
      matriculaConsular: string;
    };
export type BeneficialOwner =
  | {
      ssn: string;
    }
  | {
      passport: string;
      nationality: string;
    }
  | {
      matriculaConsular: string;
    };
export type Trustee =
  | {
      ssn: string;
    }
  | {
      passport: string;
      nationality: string;
    }
  | {
      matriculaConsular: string;
    };
export type Grantor =
  | {
      ssn: string;
    }
  | {
      passport: string;
      nationality: string;
    }
  | {
      matriculaConsular: string;
    };

export interface CreateApplication {
  data: CreateBusinessApplication | CreateIndividualApplication | CreateTrustApplication;
}
export interface CreateBusinessApplication {
  type: "businessApplication";
  attributes: {
    name: string;
    dba?: string;
    ein: string;
    entityType: "Corporation" | "LLC" | "Partnership";
    dateOfIncorporation?: string;
    stateOfIncorporation: string;
    purpose?: string;
    phone: Phone | Phone1;
    address: Address;
    contact: Contact;
    officer: Officer;
    ip?: string;
    website?: string;
    beneficialOwners: BeneficialOwner[];
    tags?: Tags;
    idempotencyKey?: string;
    /**
     * @maxItems 1
     */
    deviceFingerprints?: [] | [DeviceFingerprint];
    industry?:
      | "Retail"
      | "Wholesale"
      | "Restaurants"
      | "Hospitals"
      | "Construction"
      | "Insurance"
      | "Unions"
      | "RealEstate"
      | "FreelanceProfessional"
      | "OtherProfessionalServices"
      | "OnlineRetailer"
      | "OtherEducationServices";
  };
}
export interface Phone {
  countryCode: string;
  number: string;
}
export interface Phone1 {
  countryCode: string;
  number: string;
}
export interface Address {
  street: string;
  street2?: string | null;
  city: string;
  state: string;
  postalCode: string;
  country: "US";
}
export interface Contact {
  fullName?: FullName;
  email?: string;
  phone?: Phone | Phone1;
  jwtSubject?: string | null;
}
export interface FullName {
  first: string;
  last: string;
}
export interface Tags {
  /**
   * This interface was referenced by `Tags`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9_]{1,128}$".
   */
  [k: string]: string;
}
export interface DeviceFingerprint {
  provider: "iovation";
  value: string;
}
export interface CreateIndividualApplication {
  type: "individualApplication";
  attributes:
    | {
        ssn: string;
      }
    | {
        passport: string;
        nationality: string;
      }
    | {
        matriculaConsular: string;
      };
}
export interface CreateTrustApplication {
  type: "trustApplication";
  attributes: {
    name: string;
    stateOfIncorporation: string;
    revocability?: "Revocable" | "Irrevocable";
    sourceOfFunds: "Inheritance" | "Salary" | "Savings" | "InvestmentReturns" | "Gifts";
    taxId: string;
    trustees: Trustee[];
    grantor: Grantor;
    contact?: Contact1;
    ip?: string;
    beneficiaries: Beneficiary[];
    tags?: Tags;
    idempotencyKey?: string;
    /**
     * @maxItems 1
     */
    deviceFingerprints?: [] | [DeviceFingerprint];
  };
}
export interface Contact1 {
  fullName?: FullName;
  email?: string;
  phone?: Phone | Phone1;
  address?: Address | Address1 | Address2;
  jwtSubject?: string | null;
}
export interface Address1 {
  street: string;
  street2?: string | null;
  city: string;
  state: string;
  postalCode: string;
  country: "CA";
}
export interface Address2 {
  street: string;
  street2?: string | null;
  city: string;
  state?: null | string;
  postalCode: string;
  country: string;
}
export interface Beneficiary {
  fullName: FullName;
  dateOfBirth: string;
}
