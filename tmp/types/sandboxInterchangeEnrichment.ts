/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Transaction = CardTransaction | ATM | Purchase;

export interface SandboxInterchangeEnrichmentResource {
  data: Transaction;
}
export interface CardTransaction {
  id: string;
  type: "cardTransaction";
  attributes: {
    createdAt: string;
    direction: "Credit" | "Debit";
    amount: number;
    balance: number;
    summary: string;
    cardLast4Digits: string;
    tags?: Tags;
    networkTransactionId?: string;
    interchange?: string | null;
    internationalServiceFee?: number;
    merchant: Merchant;
    recurring: boolean;
    paymentMethod?: string;
    digitalWallet?: string;
    cardVerificationData?: CardVerificationData;
    cardNetwork?: string;
  };
  relationships: Relationships;
}
export interface Tags {
  /**
   * This interface was referenced by `Tags`'s JSON-Schema definition
   * via the `patternProperty` "^[a-zA-Z0-9_]{1,128}$".
   */
  [k: string]: string;
}
export interface Merchant {
  name: string;
  type: number;
  category: string;
  location?: string;
  id?: string;
}
export interface CardVerificationData {
  verificationMethod: string;
}
export interface Relationships {
  account: {
    data: {
      type: "depositAccount" | "glAccount" | "account";
      id: string;
    };
  };
  customer?: {
    data: {
      type: "businessCustomer" | "individualCustomer" | "customer";
      id: string;
    };
  };
  customers?: CustomersRelationship;
  counterpartyAccount?: {
    data: {
      type: "account";
      id: string;
    };
  };
  counterpartyCustomer?: {
    data: {
      type: "customer";
      id: string;
    };
  };
  relatedTransaction?: RelatedTransaction;
  disputedTransaction?: RelatedTransaction;
  authorization?: {
    data: {
      type: "authorization";
      id: string;
    };
  };
  returned?: {
    data: {
      type: "transaction";
      id: string;
    };
  };
  payment?: {
    data: {
      type: "payment";
      id: string;
    };
  };
  recurringPayment?: {
    data: {
      type: "recurringPayment";
      id: string;
    };
  };
  org?: {
    data: {
      type: "org";
      id: string;
    };
  };
  card?: {
    data: {
      type: "card";
      id: string;
    };
  };
  incomingAch?: {
    data: {
      type: "incomingAch";
      id: string;
    };
  };
  checkDeposit?: {
    data: {
      type: "checkDeposit";
      id: string;
    };
  };
  authorizationRequest?: {
    data: {
      type: "authorizationRequest";
      id: string;
    };
  };
  paymentAdvanceTransaction?: RelatedTransaction;
  receivedPayment?: {
    data: {
      type: "receivedPayment";
      id: string;
    };
  };
  chargeback?: {
    data: {
      type: "chargeback";
      id: string;
    };
  };
  reward?: {
    data?: {
      type: "reward";
      id: string;
    };
  };
}
export interface CustomersRelationship {
  data?: {
    id?: string;
    type?: "customer";
  }[];
}
export interface RelatedTransaction {
  data: {
    type: "transaction";
    id: string;
  };
}
export interface ATM {
  id: string;
  type: "atmTransaction";
  attributes: {
    createdAt: string;
    direction: "Credit" | "Debit";
    amount: number;
    balance: number;
    summary: string;
    cardLast4Digits: string;
    atmName: string;
    atmLocation?: string;
    surcharge: number;
    tags?: Tags;
    networkTransactionId?: string;
    interchange?: string | null;
    internationalServiceFee?: number;
    cardNetwork?: string;
  };
  relationships: Relationships;
}
export interface Purchase {
  id: string;
  type: "purchaseTransaction";
  attributes: {
    createdAt: string;
    direction: "Credit" | "Debit";
    amount: number;
    balance: number;
    summary: string;
    cardLast4Digits: string;
    merchant: Merchant;
    coordinates?: Coordinates;
    recurring: boolean;
    tags?: Tags;
    networkTransactionId?: string;
    interchange?: string | null;
    ecommerce: boolean;
    cardPresent: boolean;
    internationalServiceFee?: number;
    paymentMethod?: string;
    digitalWallet?: string;
    cardVerificationData?: CardVerificationData;
    cardNetwork?: string;
  };
  relationships: Relationships;
}
export interface Coordinates {
  longitude: number;
  latitude: number;
}
